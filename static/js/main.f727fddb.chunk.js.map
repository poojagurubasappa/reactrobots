{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","constants.js","containers/App.js","actions.js","reducers.js","index.js"],"names":["Card","className","alt","src","this","props","id","name","email","Component","CardList","robots","map","robot","i","SearchBox","type","placeholder","onChange","onSearchChange","Scroll","style","overflow","border","height","children","CHANGE_SEARCH_FIELD","FETCH_ROBOTS_PENDING","FETCH_ROBOTS_SUCCESS","FETCH_ROBOTS_FAILED","App","onFetchRobots","filteredRobots","filter","toLowerCase","includes","searchField","isPending","connect","state","searchRobots","fetchRobots","error","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","initialSearchState","initialRobotsState","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"qNAGqBA,E,4JACjB,WACI,OACI,qBAAKC,UAAU,oDAAf,SACI,gCACA,qBAAKC,IAAI,SAASC,IAAG,+BAA2BC,KAAKC,MAAMC,GAAtC,cACjB,6BAAKF,KAAKC,MAAME,OAChB,4BAAIH,KAAKC,MAAMG,iB,GAPDC,aCAbC,E,4JACjB,WACI,OACA,8BACKN,KAAKC,MAAMM,OAAOC,KAAI,SAACC,EAAOC,GAC/B,OAAO,cAAC,EAAD,CAAcR,GAAIO,EAAMP,GAAIC,KAAMM,EAAMN,KAAMC,MAAOK,EAAML,OAAhDM,Y,GALQL,aCDjBM,E,4JACjB,WACI,OACI,uBAAOd,UAAU,mCACbe,KAAK,OACLC,YAAY,gBACZC,SAAUd,KAAKC,MAAMc,qB,GANEV,aCA1BW,EAAS,SAACf,GACnB,OACI,qBAAKgB,MAAO,CAACC,SAAS,SAAUC,OAAQ,iBAAkBC,OAAQ,SAAlE,SACKnB,EAAMoB,Y,OCLNC,EAAsB,sBACtBC,EAAuB,uBACvBC,EAAuB,uBACvBC,EAAsB,sBCoB7BC,E,uKAEF,WACI1B,KAAKC,MAAM0B,kB,oBAGf,WAAU,IAAD,OACCC,EAAiB5B,KAAKC,MAAMM,OAAOsB,QAAO,SAAAtB,GAAM,OAAIA,EAAOJ,KAAK2B,cAAcC,SAAS,EAAK9B,MAAM+B,gBACxG,OAAOhC,KAAKC,MAAMgC,UAClB,2CACI,sBAAKpC,UAAU,KAAf,UACI,6CACA,cAAC,EAAD,CAAWkB,eAAgBf,KAAKC,MAAMc,iBACtC,cAAC,EAAD,UACI,cAAC,EAAD,CAAUR,OAAQqB,a,GAdpBvB,aAqBH6B,eArCS,SAACC,GACrB,MAAO,CACHH,YAAaG,EAAMC,aAAaJ,YAChCzB,OAAQ4B,EAAME,YAAY9B,OAC1B0B,UAAWE,EAAME,YAAYJ,UAC7BK,MAAOH,EAAME,YAAYC,UAIN,SAACC,GACxB,MAAO,CACHxB,eAAgB,SAACyB,GAAD,OAAWD,GChBJE,EDgB4BD,EAAME,OAAOC,MChB/B,CACrC/B,KAAMU,EACNsB,QAASH,KAFiB,IAACA,GDiBvBd,cAAe,kBAAMY,GCZI,SAACA,GAC9BA,EAAS,CAAE3B,KAAMW,IACjBsB,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAI,OAAIV,EAAS,CAAC3B,KAAMY,EAAsBoB,QAASK,OAC5DC,OAAM,SAAAZ,GAAK,OAAIC,EAAS,CAAC3B,KAAMa,EAAqBmB,QAASN,cDgCvDJ,CAA6CR,G,OE1CtDyB,EAAqB,CACvBnB,YAAa,IAYXoB,EAAqB,CACvB7C,OAAQ,GACR+B,MAAO,I,gBCPLe,EAASC,yBACTC,EAAcC,YAAgB,CAACpB,aDLT,WAA8C,IAA7CD,EAA4C,uDAApCgB,EAAoBM,EAAgB,uDAAP,GAC9D,OAAOA,EAAO7C,MACV,KAAKU,EACD,OAAOoC,OAAOC,OAAO,GAAIxB,EAAO,CAACH,YAAayB,EAAOb,UACzD,QACI,OAAOT,ICAgCE,YDSxB,WAA8C,IAA7CF,EAA4C,uDAApCiB,EAAoBK,EAAgB,uDAAP,GAC7D,OAAOA,EAAO7C,MACV,KAAKW,EAAsB,OAAOmC,OAAOC,OAAO,GAAIxB,EAAO,CAACF,WAAW,IACvE,KAAKT,EAAsB,OAAOkC,OAAOC,OAAO,GAAIxB,EAAO,CAAC5B,OAAQkD,EAAOb,QAASX,WAAW,IAC/F,KAAKR,EAAqB,OAAOiC,OAAOC,OAAO,GAAIxB,EAAO,CAACG,MAAOmB,EAAOb,QAASX,WAAW,IAC7F,QACI,OAAOE,MCdbyB,EAAQC,YAAYN,EAAaO,YAAgBC,IAAiBV,IAGxEW,IAASC,OACP,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFM,SAASC,eAAe,W","file":"static/js/main.f727fddb.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport 'tachyons';\n\nexport default class Card extends Component {\n    render() {\n        return (\n            <div className='bg-light-green dib br3 pad3 ma2 grow bw2 shadow-5'>\n                <div>\n                <img alt='robots' src= {`https://robohash.org/${this.props.id}?200x200`} ></img>\n                    <h2>{this.props.name}</h2>\n                    <p>{this.props.email}</p>\n                </div>\n            </div>\n        );\n    }\n}","import React, {Component} from 'react';\nimport Card from './Card';\n\nexport default class CardList extends Component {\n    render() {\n        return (\n        <div>\n            {this.props.robots.map((robot, i) => {\n            return <Card key={i} id={robot.id} name={robot.name} email={robot.email}/>\n        })}\n        </div>)\n    };\n}\n","import React, {Component} from 'react';\n\nexport default class SearchBox extends Component {\n    render() {\n        return (\n            <input className='pa3 ba b--green bg-lightest-blue'\n                type='text' \n                placeholder='Search Robots'\n                onChange={this.props.onSearchChange}\n            />\n        );\n    }\n}","import React from 'react';\n\nexport const Scroll = (props) => {\n    return (\n        <div style={{overflow:'scroll', border: '1px solid pink', height: '500px'}}>\n            {props.children}\n        </div>\n    );\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const FETCH_ROBOTS_PENDING = 'FETCH_ROBOTS_PENDING';\nexport const FETCH_ROBOTS_SUCCESS = 'FETCH_ROBOTS_SUCCESS';\nexport const FETCH_ROBOTS_FAILED = 'FETCH_ROBOTS_FAILED';","import React, {Component} from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport {Scroll} from '../components/Scroll';\nimport { connect } from 'react-redux';\nimport { setSearchField, fetchRobots } from '../actions';\n\nconst mapStateToProps = (state) => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.fetchRobots.robots,\n        isPending: state.fetchRobots.isPending,\n        error: state.fetchRobots.error\n    };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onFetchRobots: () => dispatch(fetchRobots())\n    }\n};\n\nclass App extends Component {\n\n    componentDidMount() {\n        this.props.onFetchRobots();\n    }\n    \n    render() {\n        const filteredRobots = this.props.robots.filter(robots => robots.name.toLowerCase().includes(this.props.searchField));\n        return this.props.isPending ? \n        <h1>Loading..</h1> : (\n            <div className='tc'>\n                <h1>Robofriends</h1>\n                <SearchBox onSearchChange={this.props.onSearchChange}/>\n                <Scroll>\n                    <CardList robots={filteredRobots} />\n                </Scroll>\n            </div>\n        );\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD, FETCH_ROBOTS_PENDING, FETCH_ROBOTS_SUCCESS, FETCH_ROBOTS_FAILED } from './constants';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n});\n\nexport const fetchRobots = () => (dispatch) => {\n    dispatch({ type: FETCH_ROBOTS_PENDING });\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response=> response.json())\n        .then(data => dispatch({type: FETCH_ROBOTS_SUCCESS, payload: data}))\n        .catch(error => dispatch({type: FETCH_ROBOTS_FAILED, payload: error}))\n}; //changing this to a higher order function","import { CHANGE_SEARCH_FIELD, FETCH_ROBOTS_PENDING, FETCH_ROBOTS_SUCCESS, FETCH_ROBOTS_FAILED } from './constants';\n\nconst initialSearchState = {\n    searchField: ''\n};\n\nexport const searchRobots = (state = initialSearchState, action = {}) => {\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD : \n            return Object.assign({}, state, {searchField: action.payload});\n        default: \n            return state;\n    }\n}\n\nconst initialRobotsState = {\n    robots: [],\n    error: ''\n};\n\nexport const fetchRobots = (state = initialRobotsState, action = {}) => {\n    switch(action.type) {\n        case FETCH_ROBOTS_PENDING: return Object.assign({}, state, {isPending: true});\n        case FETCH_ROBOTS_SUCCESS: return Object.assign({}, state, {robots: action.payload, isPending: false});\n        case FETCH_ROBOTS_FAILED: return Object.assign({}, state, {error: action.payload, isPending: false});\n        default: \n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport { Provider } from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {searchRobots, fetchRobots} from './reducers';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, fetchRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger)); //rootReducer; if there are multiple reducers, combine them to one root reducer\n\n//pass down the store to App\nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}